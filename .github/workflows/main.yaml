name: Build & Deploy Myapp

on:
  push:
    branches:
      - main

jobs:
  ci:
    name: Continuous Integration - Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/med:v${{ github.run_number }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/med:v${{ github.run_number }}

  cd:
    name: Continuous Deployment - Update Helm Chart and Deploy with Argo CD
    runs-on: ubuntu-latest
    needs: ci  # This ensures the 'cd' job runs only after 'ci' job is successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update image tags in values.yaml
        run: |
          TAG=v${{ github.run_number }}
          sed -i "s/^ *tag: \"v[0-9]*\"$/  tag: \"$TAG\"/" mychart/values.yaml

      - name: Commit and push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          git config user.email "trabelsi.mohamed.1@esprit.tn"
          git config user.name "motrabelsi10"
          git add mychart/values.yaml
          git commit -m "Update image tag v${{ github.run_number }}"
          git push origin main

      - name: Install Argo CD CLI
        run: |
          # Install Argo CD CLI
          VERSION=$(curl --silent "https://api.github.com/repos/argoproj/argo-cd/releases/latest" | jq -r .tag_name)
          curl -sSL -o /usr/local/bin/argocd "https://github.com/argoproj/argo-cd/releases/download/${VERSION}/argocd-linux-amd64"
          chmod +x /usr/local/bin/argocd

      - name: Configure Argo CD CLI
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          # Log in to Argo CD
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure

